service: project-api

plugins:
  - serverless-bundle
  - serverless-offline

custom:
  region: eu-west-1
  environment: ${file(./env.yml):${sls:stage}, file(./env.yml):default}

provider:
  name: aws
  runtime: nodejs14.x
  region: ${self:custom.region}
  versionFunctions: false
  lambdaHashingVersion: "20201221"
  tracing:
    apiGateway: true
    lambda: true
  logs:
    httpApi:
      format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","userAgent":"$context.identity.userAgent","httpMethod":"$context.httpMethod","routeKey":"$context.routeKey","protocol":"$context.protocol","apiId":"$context.apiId","errorMessage":"$context.error.message","autorizerError":"$context.authorizer.error","methodStatus":"$context.status","integrationStatus":"$context.integration.status","responseLength":"$context.responseLength","responseLatency":"$context.responseLatency","integrationLatency":"$context.integrationLatency","authorizerLatency":"$context.authorizer.integrationLatency", "identityCaller": "$context.identity.caller"}'
  httpApi:
    metrics: true

  environment:
    AWS_ACCESS_KEY_ID: ${self:custom.environment.AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${self:custom.environment.AWS_SECRET_ACCESS_KEY}
    REGION: ${self:custom.region}
    STAGE: ${sls:stage}

    # TABLE ENVIRONMENT VARIABLES
    Table: ${file(./database/serverless.yml):custom.MAIN_TABLE_NAME}
    
  iamRoleStatements: ${file(./utils/_iam.yml)}

functions:
  - ${file(./utils/endpoints-1.yml)}
  - ${file(./utils/endpoints-2.yml)}
  - ${file(./utils/endpoints-3.yml)}