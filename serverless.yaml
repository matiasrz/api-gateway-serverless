service: project-api

plugins:
  - serverless-bundle
  - serverless-offline

useDotenv: true
custom:
  region: eu-west-1
  # STAGES AS UPPERCASE FOR DYNAMIC STRING INTERPOLATION
  dev: DEV
  prod: PROD

provider:
  name: aws
  runtime: nodejs14.x
  region: ${self:custom.region}
  versionFunctions: false
  tracing:
    apiGateway: true
    lambda: true
  logs:
    httpApi:
      format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","userAgent":"$context.identity.userAgent","httpMethod":"$context.httpMethod","routeKey":"$context.routeKey","protocol":"$context.protocol","apiId":"$context.apiId","errorMessage":"$context.error.message","autorizerError":"$context.authorizer.error","methodStatus":"$context.status","integrationStatus":"$context.integration.status","responseLength":"$context.responseLength","responseLatency":"$context.responseLatency","integrationLatency":"$context.integrationLatency","authorizerLatency":"$context.authorizer.integrationLatency", "identityCaller": "$context.identity.caller"}'
  httpApi:
    metrics: true
    cors:
      allowedOrigins:
        - http://localhost:3000
    authorizers:
      cognitoJWT:
        type: JWT
        name: authorizer
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
            - ""
            - - https://cognito-idp.${self:custom.region}.amazonaws.com/
              - !Ref ProjectUserPool
        audience:
          - !Ref ProjectUserPoolClient

  environment:
    API_URL: ${env:${self:custom.${sls:stage}}_API_URL}
    AWS_L_ACCESS_KEY_ID: ${env:${self:custom.${sls:stage}}_AWS_ACCESS_KEY_ID}
    AWS_L_SECRET_ACCESS_KEY: ${env:${self:custom.${sls:stage}}_AWS_SECRET_ACCESS_KEY}
    AWS_USER_POOL_ID: !Ref ProjectUserPool
    MAIN_TABLE: ${file(./database/serverless.yaml):custom.MAIN_TABLE_NAME}
    STAGE: ${sls:stage}

  iam:
    role:
      statements: ${file(./utils/IAM.yaml)}

functions:
  - ${file(./utils/HealthCheckEndpoints.yaml)}

resources:
  - ${file(./utils/Cognito.yaml)}