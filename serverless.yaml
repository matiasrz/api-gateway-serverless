service: project-api

plugins:
  - serverless-bundle
  - serverless-offline

custom:
  region: eu-west-1

provider:
  name: aws
  runtime: nodejs14.x
  region: ${self:custom.region}
  versionFunctions: false
  tracing:
    apiGateway: true
    lambda: true
  logs:
    httpApi:
      format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","userAgent":"$context.identity.userAgent","httpMethod":"$context.httpMethod","routeKey":"$context.routeKey","protocol":"$context.protocol","apiId":"$context.apiId","errorMessage":"$context.error.message","autorizerError":"$context.authorizer.error","methodStatus":"$context.status","integrationStatus":"$context.integration.status","responseLength":"$context.responseLength","responseLatency":"$context.responseLatency","integrationLatency":"$context.integrationLatency","authorizerLatency":"$context.authorizer.integrationLatency", "identityCaller": "$context.identity.caller"}'
  httpApi:
    metrics: true

  environment:
    REGION: ${self:custom.region}
    STAGE: ${sls:stage}

    # TABLE ENVIRONMENT VARIABLES
    Table: ${file(./database/serverless.yaml):custom.MAIN_TABLE_NAME}

  iam:
    role:
      statements: ${file(./utils/IAM.yaml)}


functions:
  - ${file(./utils/HealthCheckEndpoints.yaml)}

resources:
  - ${file(./utils/Cognito.yaml)}